<project name="CBF for Pentaho 5 server series" default="all"> 
	<description> "Pentaho BI server customized ant build" </description>
	
	<fail message="FATAL: 'project' property not set. Please provide it the ant command, eg: ant -Dproject=myproject -Denv=dev" unless="project"/>
	
	<condition property="config.properties" value="build-${env}.properties" else="build.properties">
		<isset property="env"/>
	</condition>

	<property name="config.properties.file" value="project-${project}/config/${config.properties}"/>
	<property name="config.properties.default.file" value="project-${project}/config/build.properties"/>

	<available file="${config.properties.file}" type="file" property="config.properties.exists"/>
	<fail message="FATAL: Configuration file not found at ${config.properties.path}" unless="config.properties.exists"/>

	<property file="${config.properties.file}"/>
	<property file="${config.properties.default.file}"/>

	<target name="all" depends="build-server, make-dist, apply-patches"/>

	<target name="build-server" description="Build a full server in pentaho-xxx/assembly/bin/stage">
		<ant dir="${pentaho.dir}" antfile="dev_build.xml" target="dev-rebuild" inheritAll="true" />
	</target>

	<target name="make-dist">
		<delete dir="${dist.dir}" />
		<copy todir="${dist.dir}" failonerror="true" verbose="false">
			<fileset dir="${pentaho.dir}/assembly/bin/stage/biserver-ce" />
		</copy>
		<chmod dir="${dist.dir}" perm="ugo+rx" includes="**/*.sh"/>
	</target>

	<target name="apply-patches">
		<copy todir="${dist.dir}" failonerror="true" overwrite="true" verbose="true" filtering="true">
			<fileset dir="project-${project}/patches/" />
			<filterset>
				<filtersfile file="${config.properties.default.file}"/>
				<filtersfile file="${config.properties.file}"/>
			</filterset>
		</copy>
	<delete file="${dist.dir}/tomcat/conf/Catalina/localhost/pentaho.xml"/>		
	</target>

	<property name="solution.system.dir" value="${dist.dir}/pentaho-solutions/system" />
	<property name="tmp.dir" value=".tmp" />

	<target name="install-plugins" description="Install the most important plugins from marketplace" depends="make-temp-dir, install-cde, install-cdf, install-cda, install-cgg, install-saiku, install-sparkl, install-repositorySync">
		<echo>All ctools have been installed!</echo>
	</target>

	<target name="make-temp-dir">
		<echo>creating temporary folder ${tmp.dir}</echo>
		<mkdir dir="${tmp.dir}" />
	</target>

	<target name="install-cdf" if="cdf.version">
		<echo> installing cdf version ${cdf.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete>
		<delete dir="${solution.system.dir}/pentaho-cdf" />
		<get src="http://ci.analytical-labs.com/job/Webdetails-CDF-5-Release/lastSuccessfulBuild/artifact/bi-platform-v2-plugin/dist/pentaho-cdf-${ctools.version}.zip" dest="${tmp.dir}"></get>
		<unzip src="${tmp.dir}/pentaho-cdf-${ctools.version}.zip" dest="${solution.system.dir}" />
	</target>

	<target name="install-cde" if="cde.version">
		<echo> installing cde version ${cde.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete> 
		<delete dir="${solution.system.dir}/pentaho-cdf-dd" />
		<get src="http://www.webdetails.pt/ficheiros/cde/${ctools.version}/5.x/dist.zip" dest="${tmp.dir}"></get>
		<unzip src="${tmp.dir}/dist.zip" dest="${tmp.dir}/dest"> 
			<patternset>
				<include name="dist/pentaho-cdf-dd-${ctools.version}.zip" />
			</patternset>
		</unzip>
		<unzip src="${tmp.dir}/dest/dist/pentaho-cdf-dd-${ctools.version}.zip" dest="${solution.system.dir}" />
	</target>

	<target name="install-cda" if="cda.version">
		<echo> installing cda version ${cda.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete> 
		<delete dir="${solution.system.dir}/cda" />
		<get src="http://www.webdetails.pt/ficheiros/cda/${ctools.version}/5.x/dist.zip" dest="${tmp.dir}"></get>
		<unzip src="${tmp.dir}/dist.zip" dest="${tmp.dir}/dest"> 
			<patternset>
				<include name="dist/cda-${ctools.version}.zip" />
			</patternset>
		</unzip>
		<unzip src="${tmp.dir}/dest/dist/cda-${ctools.version}.zip" dest="${solution.system.dir}" />
	</target>

	<target name="install-cgg" if="cgg.version">
		<echo> installing cgg version ${cgg.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete> 
		<delete dir="${solution.system.dir}/cgg" />
		<get src="http://www.webdetails.pt/ficheiros/cgg/${ctools.version}/5.x/dist.zip" dest="${tmp.dir}"></get>
		<unzip src="${tmp.dir}/dist.zip" dest="${tmp.dir}/dest"> 
			<patternset>
				<include name="dist/cgg-${ctools.version}.zip" />
			</patternset>
		</unzip>
		<unzip src="${tmp.dir}/dest/dist/cgg-${ctools.version}.zip" dest="${solution.system.dir}" />
	</target>

	<target name="install-saiku" if="saiku.version" depends="make-temp-dir">
		<echo> installing saiku version ${saiku.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete>
		<delete dir="${solution.system.dir}/saiku" />
		<get src="http://ci.analytical-labs.com/job/saiku-bi-platform-plugin-p5/lastStableBuild/artifact/saiku-bi-platform-plugin-p5/target/saiku-plugin-p5-2.6-SNAPSHOT.zip" dest="${tmp.dir}/saiku-plugin.zip"></get>
		<unzip src="${tmp.dir}/saiku-plugin.zip" dest="${solution.system.dir}" />
	</target>

	<target name="install-sparkl" if="sparkl.version" depends="make-temp-dir">
		<echo> installing sparkl version ${sparkl.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete> 
		<delete dir="${solution.system.dir}/sparkl" />
		<get src="http://ci.pentaho.com/job/sparkl-release/lastSuccessfulBuild/artifact/dist/sparkl-${sparkl.version}.zip" dest="${tmp.dir}"></get>
		<unzip src="${tmp.dir}/sparkl-${sparkl.version}.zip" dest="${solution.system.dir}" />
		<delete dir="${solution.system.dir}/sparkl/.git" />
	</target>

	<target name="install-repositorySync" if="repositorySync.version" depends="make-temp-dir">
		<echo> installing repository synchronizer version ${repositorySync.version} ...</echo>
		<delete> <fileset dir="${tmp.dir}" /> </delete> 
		<delete dir="${solution.system.dir}/repositorySynchronizer" />
		<get src="http://ci.pentaho.com/job/RepositorySynchronizer/lastSuccessfulBuild/artifact/dist/repositorySynchronizer-${repositorySync.version}.zip" dest="${tmp.dir}"></get>
		<unzip src="${tmp.dir}/repositorySynchronizer-${repositorySync.version}.zip" dest="${solution.system.dir}" />
		<delete dir="${solution.system.dir}/repositorySynchronizer/.git" />
	</target>

</project>